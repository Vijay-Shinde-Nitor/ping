// Mocks generated by Mockito 5.1.0 from annotations
// in nitor_ping/test/presentation/bloc/ping_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dart_ping/dart_ping.dart' as _i4;
import 'package:dart_ping/src/models/ping_data.dart' as _i6;
import 'package:dart_ping/src/models/ping_parser.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nitor_ping/presentation/bloc/ping_bloc.dart' as _i7;
import 'package:nitor_ping/presentation/bloc/ping_event.dart' as _i8;
import 'package:nitor_ping/presentation/bloc/ping_state.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePingParser_0 extends _i1.Fake implements _i2.PingParser {}

class _FakePingState_1 extends _i1.Fake implements _i3.PingState {}

/// A class which mocks [Ping].
///
/// See the documentation for Mockito's code generation for more information.
class MockPing extends _i1.Mock implements _i4.Ping {
  MockPing() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PingParser get parser => (super.noSuchMethod(Invocation.getter(#parser),
      returnValue: _FakePingParser_0()) as _i2.PingParser);
  @override
  set parser(_i2.PingParser? _parser) =>
      super.noSuchMethod(Invocation.setter(#parser, _parser),
          returnValueForMissingStub: null);
  @override
  String get command =>
      (super.noSuchMethod(Invocation.getter(#command), returnValue: '')
          as String);
  @override
  _i5.Stream<_i6.PingData> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i6.PingData>.empty()) as _i5.Stream<_i6.PingData>);
  @override
  _i5.Future<bool> stop() => (super.noSuchMethod(Invocation.method(#stop, []),
      returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [PingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPingBloc extends _i1.Mock implements _i7.PingBloc {
  MockPingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PingState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakePingState_1()) as _i3.PingState);
  @override
  _i5.Stream<_i3.PingState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i3.PingState>.empty()) as _i5.Stream<_i3.PingState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.PingEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.PingEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.PingState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.PingEvent>(_i9.EventHandler<E, _i3.PingState>? handler,
          {_i9.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(_i9.Transition<_i8.PingEvent, _i3.PingState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void onChange(_i9.Change<_i3.PingState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
